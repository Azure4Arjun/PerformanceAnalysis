/*
Deployment script for ServerAnalysis

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "ServerAnalysis"
:setvar DefaultFilePrefix "ServerAnalysis"
:setvar DefaultDataPath "C:\MSSQL\Data\"
:setvar DefaultLogPath "C:\MSSQL\Data\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET PAGE_VERIFY NONE,
                DISABLE_BROKER 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Creating [PSuser]...';


GO
CREATE USER [PSuser] FOR LOGIN [PSuser];


GO
REVOKE CONNECT TO [PSuser];


GO
PRINT N'Creating [SSISuser]...';


GO
CREATE USER [SSISuser] FOR LOGIN [SSISuser];


GO
REVOKE CONNECT TO [SSISuser];


GO
PRINT N'Creating [SSRSuser]...';


GO
CREATE USER [SSRSuser] FOR LOGIN [SSRSuser];


GO
REVOKE CONNECT TO [SSRSuser];


GO
PRINT N'Creating [Analysis]...';


GO
CREATE SCHEMA [Analysis]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [Analysis].[ServerStats]...';


GO
CREATE TABLE [Analysis].[ServerStats] (
    [ServerID]  INT             IDENTITY (1, 1) NOT NULL,
    [ServerNm]  VARCHAR (30)    NOT NULL,
    [PerfDate]  DATETIME        NOT NULL,
    [PctProc]   DECIMAL (10, 4) NOT NULL,
    [Memory]    BIGINT          NOT NULL,
    [PgFilUse]  DECIMAL (10, 4) NOT NULL,
    [DskSecRd]  DECIMAL (10, 4) NOT NULL,
    [DskSecWrt] DECIMAL (10, 4) NOT NULL,
    [ProcQueLn] INT             NOT NULL,
    CONSTRAINT [PK_ServerStats] PRIMARY KEY CLUSTERED ([ServerID] ASC)
);


GO
PRINT N'Creating [Analysis].[ServerStats].[IX_ServerStats_PerfDate]...';


GO
CREATE NONCLUSTERED INDEX [IX_ServerStats_PerfDate]
    ON [Analysis].[ServerStats]([PerfDate] ASC);


GO
PRINT N'Creating [Analysis].[Server]...';


GO
CREATE TABLE [Analysis].[Server] (
    [ServerID] INT          IDENTITY (1, 1) NOT NULL,
    [ServerNm] VARCHAR (50) NOT NULL,
    CONSTRAINT [PK_Server] PRIMARY KEY CLUSTERED ([ServerID] ASC)
);


GO
PRINT N'Creating [Analysis].[QueryElapsedTime]...';


GO
CREATE TABLE [Analysis].[QueryElapsedTime] (
    [ID]              INT           IDENTITY (1, 1) NOT NULL,
    [ServerName]      VARCHAR (50)  NULL,
    [DatabaseName]    VARCHAR (50)  NULL,
    [DateKey]         INT           NULL,
    [TimeKey]         INT           NULL,
    [Object_Name]     VARCHAR (50)  NULL,
    [Total_Seconds]   FLOAT (53)    NULL,
    [Execution_Count] INT           NULL,
    [Query]           VARCHAR (MAX) NULL,
    CONSTRAINT [PK_QueryElapsedTime] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [Analysis].[QueryElapsedTime].[IX_Analysis_QueryElapsedTime_DateTimeKeys]...';


GO
CREATE NONCLUSTERED INDEX [IX_Analysis_QueryElapsedTime_DateTimeKeys]
    ON [Analysis].[QueryElapsedTime]([DateKey] ASC, [TimeKey] ASC, [Object_Name] ASC)
    INCLUDE([DatabaseName], [Execution_Count], [Query], [ServerName], [Total_Seconds]);


GO
PRINT N'Creating [Analysis].[InstanceStats]...';


GO
CREATE TABLE [Analysis].[InstanceStats] (
    [InstanceID] INT             IDENTITY (1, 1) NOT NULL,
    [ServerID]   INT             NOT NULL,
    [ServerNm]   VARCHAR (30)    NOT NULL,
    [InstanceNm] VARCHAR (30)    NOT NULL,
    [PerfDate]   DATETIME        NOT NULL,
    [FwdRecSec]  DECIMAL (10, 4) NOT NULL,
    [PgSpltSec]  DECIMAL (10, 4) NOT NULL,
    [BufCchHit]  DECIMAL (10, 4) NOT NULL,
    [PgLifeExp]  INT             NOT NULL,
    [LogGrwths]  INT             NOT NULL,
    [BlkProcs]   INT             NOT NULL,
    [BatReqSec]  DECIMAL (10, 4) NOT NULL,
    [SQLCompSec] DECIMAL (10, 4) NOT NULL,
    [SQLRcmpSec] DECIMAL (10, 4) NOT NULL,
    CONSTRAINT [PK_InstanceStats] PRIMARY KEY CLUSTERED ([InstanceID] ASC)
);


GO
PRINT N'Creating [Analysis].[InstanceStats].[AK_ServerStats]...';


GO
CREATE NONCLUSTERED INDEX [AK_ServerStats]
    ON [Analysis].[InstanceStats]([ServerID] ASC);


GO
PRINT N'Creating [Analysis].[InstanceMemory]...';


GO
CREATE TABLE [Analysis].[InstanceMemory] (
    [MemoryID]                                     INT          IDENTITY (1, 1) NOT NULL,
    [MemoryDate]                                   DATETIME     NOT NULL,
    [DateKey]                                      INT          NULL,
    [TimeKey]                                      INT          NULL,
    [ServerName]                                   VARCHAR (30) NULL,
    [KbMemoryUsedByBufferPool]                     FLOAT (53)   NULL,
    [KbMemoryNeededPerCurrentWorkload]             FLOAT (53)   NULL,
    [KbMemoryDynamicUsedForConnections]            FLOAT (53)   NULL,
    [KbMemoryDynamicUsedForLocks]                  FLOAT (53)   NULL,
    [KbMemoryDynamicUsedForCache]                  FLOAT (53)   NULL,
    [KbMemoryDynamicUsedForQueryOptimization]      FLOAT (53)   NULL,
    [KbMemoryDynamicUsedForHashSortIndexOps]       FLOAT (53)   NULL,
    [KbMemoryConsumedByCursors]                    FLOAT (53)   NULL,
    [8kbPagesInBufferPool]                         FLOAT (53)   NULL,
    [8kbDataPagesInBufferPool]                     FLOAT (53)   NULL,
    [8kbFreePagesInBufferPool]                     FLOAT (53)   NULL,
    [8kbReservedPagesInBufferPool]                 FLOAT (53)   NULL,
    [8kbStolenPagesInBufferPool]                   FLOAT (53)   NULL,
    [8kbPlaCachePagesInBufferPool]                 FLOAT (53)   NULL,
    [PageLifeExpectancy]                           FLOAT (53)   NULL,
    [NumberRequestsSecWaitForFreePage]             FLOAT (53)   NULL,
    [NumberPagesFlushedDiskSec]                    FLOAT (53)   NULL,
    [NumberBuffersWrittenSecByBufferMgrLazyWriter] FLOAT (53)   NULL,
    [MemoryGrantsPending]                          FLOAT (53)   NULL,
    [MemoryGrantsOutstanding]                      FLOAT (53)   NULL,
    CONSTRAINT [PK_InstanceMemory] PRIMARY KEY CLUSTERED ([MemoryID] ASC)
);


GO
PRINT N'Creating [Analysis].[DiskUsage]...';


GO
CREATE TABLE [Analysis].[DiskUsage] (
    [disk_id]     INT          IDENTITY (1, 1) NOT NULL,
    [PerfDate]    DATETIME     NOT NULL,
    [ServerName]  VARCHAR (30) NULL,
    [VolumeName]  VARCHAR (30) NULL,
    [DriveName]   VARCHAR (5)  NULL,
    [Size]        FLOAT (53)   NULL,
    [FreeSpace]   FLOAT (53)   NULL,
    [PercentFree] FLOAT (53)   NULL,
    CONSTRAINT [PK_DiskUsage] PRIMARY KEY CLUSTERED ([disk_id] ASC)
);


GO
PRINT N'Creating [Analysis].[DiskMemoryStats]...';


GO
CREATE TABLE [Analysis].[DiskMemoryStats] (
    [DiskMonitorStatID]   INT             IDENTITY (1, 1) NOT NULL,
    [ServerNm]            VARCHAR (30)    NOT NULL,
    [DateKey]             INT             NOT NULL,
    [TimeKey]             INT             NOT NULL,
    [TransactionRateSec]  INT             NULL,
    [MemoryPagingRateSec] INT             NULL,
    [LogFlushesSec]       INT             NULL,
    [LogBytesFlushedSec]  INT             NULL,
    [ProcedureCacheRatio] DECIMAL (10, 4) NULL,
    [SignalWaitPercent]   DECIMAL (10, 4) NULL,
    CONSTRAINT [PK_DiskMemoryStats] PRIMARY KEY CLUSTERED ([DiskMonitorStatID] ASC)
);


GO
PRINT N'Creating [Analysis].[DatabaseUsage]...';


GO
CREATE TABLE [Analysis].[DatabaseUsage] (
    [database_id]        INT          IDENTITY (1, 1) NOT NULL,
    [PerfDate]           DATETIME     NOT NULL,
    [ServerName]         VARCHAR (30) NULL,
    [DatabaseName]       VARCHAR (30) NULL,
    [Collation]          VARCHAR (30) NULL,
    [CompatibilityLevel] VARCHAR (30) NULL,
    [AutoShrink]         VARCHAR (5)  NULL,
    [RecoveryModel]      VARCHAR (30) NULL,
    [Size]               FLOAT (53)   NULL,
    [SpaceAvailable]     FLOAT (53)   NULL,
    CONSTRAINT [PK_DatabaseUsage] PRIMARY KEY CLUSTERED ([database_id] ASC)
);


GO
PRINT N'Creating [Analysis].[FX_InstanceStats]...';


GO
ALTER TABLE [Analysis].[InstanceStats] WITH NOCHECK
    ADD CONSTRAINT [FX_InstanceStats] FOREIGN KEY ([ServerID]) REFERENCES [Analysis].[ServerStats] ([ServerID]);


GO
PRINT N'Creating [Analysis].[NegToZero]...';


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date, ,>
-- Description:	<Description, ,>
-- =============================================
CREATE FUNCTION [Analysis].[NegToZero]
(
@inNumber float
)
RETURNS float 
AS
BEGIN
	-- Declare the return variable here
	DECLARE @outNumber float 

	SELECT @outNumber = (CASE WHEN @inNumber < 0 THEN 0 ELSE @inNumber END);
	-- Return the result of the function
	RETURN @outNumber

END
GO
PRINT N'Creating [Analysis].[selServer]...';


GO


CREATE PROCEDURE [Analysis].[selServer]
AS
SET NOCOUNT ON

SELECT [ServerNm]
FROM [Analysis].[Server]
ORDER BY [ServerNm]
GO
PRINT N'Creating [Analysis].[selPerformanceAnalysisReport]...';


GO

CREATE PROCEDURE [Analysis].[selPerformanceAnalysisReport] (@InstanceName varchar(50), @PerfDate DATETIME)
AS
SET NOCOUNT ON

DECLARE @Sep INT, @BoxNm VARCHAR(50), @InstNm VARCHAR(50)

SELECT @Sep = CHARINDEX('\', @InstanceName)

IF @Sep > 0
  BEGIN
  SELECT @BoxNm = SUBSTRING(@InstanceName, 1, @Sep - 1), @InstNm = SUBSTRING(@InstanceName, @Sep + 1, (LEN(@InstanceName) - @Sep))
  END
ELSE
  BEGIN
  SELECT @BoxNm = @InstanceName, @InstNm = 'MSSQLSERVER'
  END

SELECT CONVERT(char(8), s.[PerfDate], 108) as PerfTime
      ,s.[ServerNm]
      ,i.[InstanceNm]
      ,s.[PctProc]
      ,s.[Memory]
      ,s.[PgFilUse]
      ,s.[DskSecRd]
      ,s.[DskSecWrt]
      ,s.[ProcQueLn]
      ,i.[FwdRecSec]
      ,i.[PgSpltSec]
      ,i.[BufCchHit]
      ,i.[PgLifeExp]
      ,i.[LogGrwths]
      ,i.[BlkProcs]
      ,i.[BatReqSec]
      ,i.[SQLCompSec]
      ,i.[SQLRcmpSec]
FROM [Analysis].[ServerStats] s
INNER JOIN [Analysis].[InstanceStats] i
ON s.[ServerID] = i.[ServerID]
WHERE s.ServerNm = @BoxNm
AND i.ServerNm = @BoxNm
AND i.InstanceNm = @InstNm
AND s.[PerfDate] BETWEEN @PerfDate AND DATEADD(DAY,1,@PerfDate)
GO
PRINT N'Creating [Analysis].[selComparativeAnalysisReport]...';


GO

CREATE PROCEDURE [Analysis].[selComparativeAnalysisReport] (@InstanceName varchar(50))
AS
SET NOCOUNT ON

DECLARE @Sep INT, @BoxNm VARCHAR(50), @InstNm VARCHAR(50)

SELECT @Sep = CHARINDEX('\', @InstanceName)

IF @Sep > 0
  BEGIN
  SELECT @BoxNm = SUBSTRING(@InstanceName, 1, @Sep - 1), @InstNm = SUBSTRING(@InstanceName, @Sep + 1, (LEN(@InstanceName) - @Sep))
  END
ELSE
  BEGIN
  SELECT @BoxNm = @InstanceName, @InstNm = 'MSSQLSERVER'
  END

SELECT CONVERT(char(10), s.[PerfDate], 101) as PerfDate
      ,CONVERT(char(8), s.[PerfDate], 108) as PerfTime
      ,s.[PctProc]
      ,i.[BatReqSec]
      ,i.[BufCchHit]
      ,i.[PgLifeExp]
FROM [Analysis].[ServerStats] s
INNER JOIN [Analysis].[InstanceStats] i
ON s.[ServerID] = i.[ServerID]
WHERE s.ServerNm = @BoxNm
AND i.ServerNm = @BoxNm
AND i.InstanceNm = @InstNm
AND s.[PerfDate] > DATEADD(dd, -35, GETDATE())
ORDER BY CONVERT(Date,s.[PerfDate]) DESC, PerfTime ASC
GO
PRINT N'Creating [Analysis].[QueryElapsedTimeRecord]...';


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [Analysis].[QueryElapsedTimeRecord]
AS
BEGIN
	
	SET NOCOUNT ON;
	SET TRAN ISOLATION LEVEL READ UNCOMMITTED;
	SET DEADLOCK_PRIORITY LOW;
	SET XACT_ABORT ON;
	BEGIN TRANSACTION;
		INSERT INTO [ServerAnalysis].[Analysis].[QueryElapsedTime]
		([ServerName],[DatabaseName],[DateKey],[TimeKey],[Object_Name],[Total_Seconds],[Execution_Count],[Query])
		SELECT TOP 100
			@@SERVERNAME,
			DB_NAME(qt.dbid),
			CONVERT(VARCHAR(10), GETDATE(),112) [DateKey],
			LEFT((REPLACE(CONVERT(VARCHAR(10), GETDATE(),108),':','')),3)+'000' [TimeKey],
			o.name AS [object_name],
			qs.total_elapsed_time / 1000000.0 AS total_seconds,
			qs.execution_count,
			SUBSTRING (qt.text,qs.statement_start_offset/2, 
						(CASE	WHEN qs.statement_end_offset = -1 THEN LEN(CONVERT(NVARCHAR(MAX), qt.text)) * 2 
								ELSE qs.statement_end_offset END - qs.statement_start_offset)/2) AS individual_query
		FROM	sys.dm_exec_query_stats qs
				CROSS APPLY sys.dm_exec_sql_text(qs.sql_handle) as qt
				LEFT OUTER JOIN sys.objects o ON qt.objectid = o.object_id
		WHERE	qt.dbid = DB_ID()
			AND qs.last_execution_time > DATEADD(day, -1,GETDATE())
		ORDER BY (qs.total_elapsed_time / qs.execution_count / 1000000.0) DESC;
	COMMIT;
	SET TRAN ISOLATION LEVEL READ COMMITTED;
	RETURN 0;

END
GO
PRINT N'Creating [Analysis].[QueryElapsedTimeGet]...';


GO
-- =============================================
-- Author:		David Speight
-- =============================================
CREATE PROCEDURE [Analysis].[QueryElapsedTimeGet] 
@ServerName NVARCHAR(50)=@@SERVERNAME,
@DatabaseName NVARCHAR(50) = NULL,
@EndDate DATETIME = NULL,
@MinutesBack INT = 60
AS
BEGIN

	SET NOCOUNT ON;
	SET TRAN ISOLATION LEVEL READ UNCOMMITTED;

	SELECT @EndDate = (CASE WHEN @EndDate IS NULL THEN (GETDATE()) ELSE @EndDate END);

	DECLARE @TimeKey INT = CONVERT(INT,(SELECT LEFT((REPLACE(CONVERT(VARCHAR(10), @EndDate,108),':','')),3)+'000'));
    DECLARE @DateKey INT = CONVERT(INT,(CONVERT(VARCHAR(10), @EndDate,112)));
	-- Get data and time from 10 minutes ago.
	DECLARE @TimeKeyPrevious INT = CONVERT(INT,(SELECT LEFT((REPLACE(CONVERT(VARCHAR(10), DATEADD(MINUTE,(0-@MinutesBack),@EndDate),108),':','')),3)+'000'));
	DECLARE @DateKeyPrevious INT = CONVERT(INT,(CONVERT(VARCHAR(10), DATEADD(MINUTE,(0-@MinutesBack),@EndDate),112)));

	SELECT	[Object_Name], 
			[Rank]-1 AS [Rank],
			Query, 
			DateKey, 
			CONVERT(INT,(CASE	WHEN LEN(TimeKey) = 6 THEN LEFT(TimeKey,4)
					ELSE LEFT(TimeKey,3) END)) AS [TimeKey],
			ISNULL([Total_Seconds_Diff],0) AS [Total_Seconds_Diff],
			ISNULL([Execution_Count_Diff],0) AS [Total_Count],
			ISNULL([ElapsedTime],0) AS [Average_Seconds]
	FROM (
	SELECT	([DatabaseName] +'..' + [Object_Name]) AS [Object_Name],  
	RANK() OVER (PARTITION BY [Object_Name], Query ORDER BY DateKey, TimeKey) [Rank],
	DateKey, TimeKey, Total_Seconds, Execution_Count, Query,
	LAG(Total_Seconds,1,0) OVER (ORDER BY [Object_Name], Query, DateKey, TimeKey) AS [Total_Seconds_Lag],	
	[Analysis].[NegToZero]((Total_Seconds - LAG(Total_Seconds,1,0) OVER (ORDER BY [Object_Name], Query, DateKey, TimeKey))) AS [Total_Seconds_Diff],
	LAG(Execution_Count,1,0) OVER (ORDER BY [Object_Name], Query, DateKey, TimeKey) AS [Execution_Count_Lag],
	[Analysis].[NegToZero]((Execution_Count - LAG(Execution_Count,1,0) OVER (ORDER BY [Object_Name], Query, DateKey, TimeKey))) AS [Execution_Count_Diff],
	([Analysis].[NegToZero]((Total_Seconds - LAG(Total_Seconds,1,0) OVER (ORDER BY [Object_Name], Query, DateKey, TimeKey)))) / NULLIF(([Analysis].[NegToZero]((Execution_Count - LAG(Execution_Count,1,0) OVER (ORDER BY [Object_Name], Query, DateKey, TimeKey)))),0) AS [ElapsedTime]
	FROM	ServerAnalysis.Analysis.QueryElapsedTime
	WHERE	[ServerName] = CONVERT(NVARCHAR(50),@@SERVERNAME)
		AND	(@DatabaseName IS NULL OR [DatabaseName] = CONVERT(NVARCHAR(50),DB_NAME())) -- Gets data on local server, if multiple instances change to = @DatabaseName
		AND DateKey BETWEEN @DateKeyPrevious AND @DateKey
		AND TimeKey BETWEEN @TimeKeyPrevious AND @TimeKey
		AND [Object_Name] <> 'QueryElapsedTimeRecord'
	) a
	WHERE a.[Rank] > 1 AND a.Total_Seconds_Diff > 0
	ORDER BY [Object_Name], Query, DateKey, TimeKey;

	SET TRAN ISOLATION LEVEL READ COMMITTED;

END
GO
PRINT N'Creating [Analysis].[QueryElapsedTimeClean]...';


GO
-- =============================================
-- Author:		David Speight
-- =============================================
CREATE PROCEDURE [Analysis].[QueryElapsedTimeClean]
@MonthsToKeep INT = 2
AS
BEGIN

 DELETE 
 FROM [Analysis].[QueryElapsedTime]
 WHERE DateKey < CONVERT(INT,(CONVERT(VARCHAR(10), DATEADD(MONTH,(0-@MonthsToKeep),GETDATE()),112)));

 DELETE
 FROM [Analysis].[DatabaseUsage]
 WHERE PerfDate < DATEADD(MONTH,(0-@MonthsToKeep),GETDATE());

 DELETE 
 FROM [Analysis].[DiskMemoryStats]
 WHERE DateKey < CONVERT(INT,(CONVERT(VARCHAR(10), DATEADD(MONTH,(0-@MonthsToKeep),GETDATE()),112)));

 DELETE
 FROM [Analysis].[DiskUsage]
 WHERE PerfDate < DATEADD(MONTH,(0-@MonthsToKeep),GETDATE());

 DELETE 
 FROM [Analysis].[InstanceMemory]
 WHERE DateKey < CONVERT(INT,(CONVERT(VARCHAR(10), DATEADD(MONTH,(0-@MonthsToKeep),GETDATE()),112)));

 DELETE
 FROM [Analysis].[InstanceStats]
 WHERE PerfDate < DATEADD(MONTH,(0-@MonthsToKeep),GETDATE());

 DELETE
 FROM [Analysis].[ServerStats]
 WHERE PerfDate < DATEADD(MONTH,(0-@MonthsToKeep),GETDATE());

 
END
GO
PRINT N'Creating [Analysis].[InstanceMemoryGet]...';


GO
-- =============================================
/* Author:	 Script to report Memory usage details of a SQL Server instance 
 Author: Sakthivel Chidambaram, Microsoft http://blogs.msdn.com/b/sqlsakthi 
 
 Date: June 2012 
 Version: V2 
 
 V1: Initial Release 
 V2: Added PLE, Memory grants pending, Checkpoint, Lazy write,Free list counters 
 */

-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [Analysis].[InstanceMemoryGet]
AS
BEGIN

	SET NOCOUNT ON;
	 -- Get size of SQL Server Page in bytes 
	 DECLARE @pg_size INT, @Instancename varchar(50) 
	 SELECT @pg_size = low from master..spt_values where number = 1 and type = 'E' 
 
	 -- Extract perfmon counters to a temporary table 
	 IF OBJECT_ID('tempdb..#perfmon_counters') is not null DROP TABLE #perfmon_counters 
	 SELECT * INTO #perfmon_counters FROM sys.dm_os_performance_counters 

	  -- Get SQL Server instance name 
	SELECT @Instancename = LEFT([object_name], (CHARINDEX(':',[object_name]))) FROM #perfmon_counters WHERE counter_name = 'Buffer cache hit ratio' 
 
	INSERT INTO [Analysis].[InstanceMemory]
	SELECT
		GETDATE(),
		CONVERT(VARCHAR(10), GETDATE(),112) [DateKey],
		LEFT((REPLACE(CONVERT(VARCHAR(10), GETDATE(),108),':','')),3)+'000' [TimeKey],
		CONVERT(VARCHAR(30),@@SERVERNAME),
		(SELECT cntr_value FROM #perfmon_counters WHERE counter_name = 'Total Server Memory (KB)'),				--[KbMemoryUsedByBufferPool]
		(SELECT cntr_value FROM #perfmon_counters WHERE counter_name = 'Target Server Memory (KB)'),			--[KbMemoryNeededPerCurrentWorkload]
		(SELECT cntr_value FROM #perfmon_counters WHERE counter_name = 'Connection Memory (KB)'),				--[KbMemoryDynamicUsedForConnections]
		(SELECT cntr_value FROM #perfmon_counters WHERE counter_name = 'Lock Memory (KB)'),						--[KbMemoryDynamicUsedForLocks]
		(SELECT cntr_value FROM #perfmon_counters WHERE counter_name = 'SQL Cache Memory (KB)'),				--[KbMemoryDynamicUsedForCache]
		(SELECT cntr_value FROM #perfmon_counters WHERE counter_name = 'Optimizer Memory (KB) '),				--[KbMemoryDynamicUsedForQueryOptimization]
		(SELECT cntr_value FROM #perfmon_counters WHERE counter_name = 'Granted Workspace Memory (KB) '),		--[KbMemoryDynamicUsedForHashSortIndexOps]
		(SELECT cntr_value FROM #perfmon_counters WHERE counter_name = 'Cursor memory usage' and instance_name = '_Total'),				--[KbMemoryConsumedByCursors]
		(SELECT cntr_value FROM #perfmon_counters WHERE object_name= @Instancename+'Buffer Manager' and counter_name = 'Total pages'),	--[8kbPagesInBufferPool]
		(SELECT cntr_value FROM #perfmon_counters WHERE object_name=@Instancename+'Buffer Manager' and counter_name = 'Database pages'),--[8kbDataPagesInBufferPool]
		(SELECT cntr_value FROM #perfmon_counters WHERE object_name=@Instancename+'Buffer Manager' and counter_name = 'Free pages'),	--[8kbFreePagesInBufferPool]
		(SELECT cntr_value FROM #perfmon_counters WHERE object_name=@Instancename+'Buffer Manager' and counter_name = 'Reserved pages'),--[8kbReservedPagesInBufferPool]
		(SELECT cntr_value FROM #perfmon_counters WHERE object_name=@Instancename+'Buffer Manager' and counter_name = 'Stolen pages'),	--[8kbStolenPagesInBufferPool]
		(SELECT cntr_value FROM #perfmon_counters WHERE object_name=@Instancename+'Plan Cache' and counter_name = 'Cache Pages' and instance_name = '_Total'),	--[8kbPlaCachePagesInBufferPool]
		(SELECT cntr_value FROM #perfmon_counters WHERE object_name=@Instancename+'Buffer Manager' and counter_name = 'Page life expectancy'), --[PageLifeExpectancy]    CASE WHEN (cntr_value > 300) THEN 'PLE is Healthy' ELSE 'PLE is not Healthy' END as 'PLE Status'
		(SELECT cntr_value as [Free list stalls/sec] FROM #perfmon_counters WHERE object_name=@Instancename+'Buffer Manager' and counter_name = 'Free list stalls/sec'),			--[NumberRequestsSecWaitForFreePage]
		(SELECT cntr_value as [Checkpoint pages/sec] FROM #perfmon_counters WHERE object_name=@Instancename+'Buffer Manager' and counter_name = 'Checkpoint pages/sec'),			--[NumberPagesFlushedDiskSec]
		(SELECT cntr_value as [Lazy writes/sec] FROM #perfmon_counters WHERE object_name=@Instancename+'Buffer Manager' and counter_name = 'Lazy writes/sec'),						--[NumberBuffersWrittenSecByBufferMgrLazyWriter]
		(SELECT cntr_value as [Memory Grants Pending] FROM #perfmon_counters WHERE object_name=@Instancename+'Memory Manager' and counter_name = 'Memory Grants Pending'),			--[MemoryGrantsPending] 
		(SELECT cntr_value as [Memory Grants Outstanding] FROM #perfmon_counters WHERE object_name=@Instancename+'Memory Manager' and counter_name = 'Memory Grants Outstanding')	--[MemoryGrantsOutstanding]

END
GO
PRINT N'Creating [Analysis].[insServerStats]...';


GO
CREATE PROCEDURE [Analysis].[insServerStats]
           (@ServerID       int OUTPUT
           ,@ServerNm       varchar(30) = NULL
           ,@PerfDate       datetime = NULL
           ,@PctProc        decimal(10,4) = NULL
           ,@Memory     bigint = NULL
           ,@PgFilUse       decimal(10,4) = NULL
           ,@DskSecRd       decimal(10,4) = NULL
           ,@DskSecWrt      decimal(10,4) = NULL
           ,@ProcQueLn      int = NULL)
AS
    SET NOCOUNT ON
    
    DECLARE @ServerOut table( ServerID int);

    INSERT INTO [Analysis].[ServerStats]
           ([ServerNm]
           ,[PerfDate]
           ,[PctProc]
           ,[Memory]
           ,[PgFilUse]
           ,[DskSecRd]
           ,[DskSecWrt]
           ,[ProcQueLn])
    OUTPUT INSERTED.ServerID INTO @ServerOut
        VALUES
           (@ServerNm
           ,@PerfDate
           ,@PctProc
           ,@Memory
           ,@PgFilUse
           ,@DskSecRd
           ,@DskSecWrt
           ,@ProcQueLn)

    SELECT @ServerID = ServerID FROM @ServerOut
    
    RETURN
GO
PRINT N'Creating [Analysis].[insInstanceStats]...';


GO
CREATE PROCEDURE [Analysis].[insInstanceStats]
           (@InstanceID     int OUTPUT
           ,@ServerID       int = NULL
           ,@ServerNm       varchar(30) = NULL
           ,@InstanceNm     varchar(30) = NULL
           ,@PerfDate       datetime = NULL
           ,@FwdRecSec      decimal(10,4) = NULL
           ,@PgSpltSec      decimal(10,4) = NULL
           ,@BufCchHit      decimal(10,4) = NULL
           ,@PgLifeExp      int = NULL
           ,@LogGrwths      int = NULL
           ,@BlkProcs       int = NULL
           ,@BatReqSec      decimal(10,4) = NULL
           ,@SQLCompSec     decimal(10,4) = NULL
           ,@SQLRcmpSec     decimal(10,4) = NULL)
AS
    SET NOCOUNT ON
    
    DECLARE @InstanceOut table( InstanceID int);

    INSERT INTO [Analysis].[InstanceStats]
           ([ServerID]
           ,[ServerNm]
           ,[InstanceNm]
           ,[PerfDate]
           ,[FwdRecSec]
           ,[PgSpltSec]
           ,[BufCchHit]
           ,[PgLifeExp]
           ,[LogGrwths]
           ,[BlkProcs]
           ,[BatReqSec]
           ,[SQLCompSec]
           ,[SQLRcmpSec])
    OUTPUT INSERTED.InstanceID INTO @InstanceOut
    VALUES
           (@ServerID
           ,@ServerNm
           ,@InstanceNm
           ,@PerfDate
           ,@FwdRecSec
           ,@PgSpltSec
           ,@BufCchHit
           ,@PgLifeExp
           ,@LogGrwths
           ,@BlkProcs
           ,@BatReqSec
           ,@SQLCompSec
           ,@SQLRcmpSec)

    SELECT @InstanceID = InstanceID FROM @InstanceOut
    
    RETURN
GO
PRINT N'Creating [Analysis].[insDiskUsage]...';


GO

CREATE PROCEDURE [Analysis].[insDiskUsage]
		   (@ServerNm	varchar(30)=NULL
		   ,@PerfDate	DATETIME = NULL
		   ,@VolName	varchar(30)=NULL
		   ,@Drive	varchar(5)=NULL
		   ,@Size	float=NULL
		   ,@Free	float=NULL
		   ,@Percent	float=NULL)
AS
	SET NOCOUNT ON
	
	INSERT INTO [Analysis].[DiskUsage]
           ([PerfDate]
           ,[ServerName]
           ,[VolumeName]
           ,[DriveName]
           ,[Size]
           ,[FreeSpace]
           ,[PercentFree])
     VALUES
           (@PerfDate
           ,@ServerNm
           ,@VolName
           ,@Drive
           ,@Size
           ,@Free
           ,@Percent)
GO
PRINT N'Creating [Analysis].[insDatabaseUsage]...';


GO

CREATE PROCEDURE [Analysis].[insDatabaseUsage]
		   (@ServerNm	varchar(30)=NULL
		   ,@PerfDate	DATETIME = NULL
		   ,@DBName	varchar(30)=NULL
		   ,@Collation	varchar(30)=NULL
		   ,@Compat	varchar(30)=NULL
		   ,@Shrink	varchar(5)=NULL
		   ,@Recovery	varchar(30)=NULL
		   ,@Size	float=NULL
		   ,@Available	float=NULL)
AS
	SET NOCOUNT ON
	
	INSERT INTO [Analysis].[DatabaseUsage]
           ([PerfDate]
           ,[ServerName]
           ,[DatabaseName]
           ,[Collation]
           ,[CompatibilityLevel]
           ,[AutoShrink]
           ,[RecoveryModel]
           ,[Size]
           ,[SpaceAvailable])
     VALUES
           (@PerfDate
           ,@ServerNm
           ,@DBName
           ,@Collation
           ,@Compat
           ,@Shrink
           ,@Recovery
           ,@Size
           ,@Available)
GO
PRINT N'Creating [Analysis].[DiskMemoryStatsGet]...';


GO
-- =============================================
-- Author:		Compiled by David Speight from SQL Central Sources
-- =============================================
CREATE PROCEDURE [Analysis].[DiskMemoryStatsGet]
AS
BEGIN

	SET NOCOUNT ON;
	-- Transaction Rate, Paging Rate, LogFlushesSec, LogBytesFlushSec
	DECLARE @TransactionRate BIGINT,@PagingRate BIGINT,@LogBytesFlushedSec BIGINT,@LogFlushesSec BIGINT;
	DECLARE @signal_wait_time_ms BIGINT, @wait_time_ms BIGINT;
	DECLARE @ProcureCacheRatio DECIMAL(10,4);
	DECLARE @SignalWaits DECIMAL(10,4);

	-- Procedure Cache Ratio
	;
	WITH    cte1
          AS ( SELECT [dopc].[object_name] ,
                    [dopc].[instance_name] ,
                    [dopc].[counter_name] ,
                    [dopc].[cntr_value] ,
                    [dopc].[cntr_type] ,
                    ROW_NUMBER() OVER ( PARTITION BY [dopc].[object_name], [dopc].[instance_name] ORDER BY [dopc].[counter_name] ) AS r_n
                FROM [sys].[dm_os_performance_counters] AS dopc
                WHERE [dopc].[counter_name] LIKE '%Cache Hit Ratio%'
                    AND ( [dopc].[object_name] LIKE '%Plan Cache%'
                          OR [dopc].[object_name] LIKE '%Buffer Cache%'
                        )
                    AND [dopc].[instance_name] LIKE '%_Total%'
             )
	SELECT @ProcureCacheRatio = (	SELECT CONVERT(DECIMAL(16, 2), ( [c].[cntr_value] * 1.0 / [c1].[cntr_value] ) * 100.0) AS [hit_pct]
								FROM [cte1] AS c
									INNER JOIN [cte1] AS c1
										ON c.[object_name] = c1.[object_name]
										   AND c.[instance_name] = c1.[instance_name]
								WHERE [c].[r_n] = 1
									AND [c1].[r_n] = 2);

	------- First sampling at 0 seconds -------
		SELECT @TransactionRate = SUM(cntr_value)
			FROM sys.dm_os_performance_counters
			WHERE counter_name = 'transactions/sec'
				AND object_name = 'SQLServer:Databases'
				AND instance_name IN (select name from master.sys.databases)
				AND instance_name NOT IN ('master','tempdb','model','msdb','SSISDB','ReportServer','ReportServerTempDB');
;     -- Databases to monitor this could be revised to query a list from a table
		SELECT @PagingRate = SUM(io1.io_stall)
		FROM sys.dm_io_virtual_file_stats(NULL, NULL) io1;
		SELECT @LogFlushesSec = SUM(cntr_value)
		FROM sys.dm_os_performance_counters
		WHERE counter_name ='Log Flushes/sec';
		SELECT @LogBytesFlushedSec = SUM(cntr_value)
		FROM sys.dm_os_performance_counters
		WHERE counter_name ='Log Bytes Flushed/sec';

		SELECT @signal_wait_time_ms = SUM(signal_wait_time_ms)
		FROM sys.dm_os_wait_stats
		SELECT @wait_time_ms = SUM(wait_time_ms)
		FROM sys.dm_os_wait_stats;

	WAITFOR DELAY '00:00:01';

	------- second sampling at 1 second -------
		SELECT @TransactionRate = SUM(cntr_value) - @TransactionRate
			FROM sys.dm_os_performance_counters
			WHERE counter_name = 'transactions/sec'
				AND object_name = 'SQLServer:Databases'
				AND instance_name IN ('MyDB1','MyDB2');     -- Databases to monitor this could be revised to query a list from a table
		SELECT @PagingRate = SUM(io1.io_stall) - @PagingRate
		FROM sys.dm_io_virtual_file_stats(NULL, NULL) io1;
		SELECT @LogFlushesSec = SUM(cntr_value) - @LogFlushesSec
		FROM sys.dm_os_performance_counters
		WHERE counter_name ='Log Flushes/sec';
		SELECT @LogBytesFlushedSec = SUM(cntr_value)-@LogBytesFlushedSec
		FROM sys.dm_os_performance_counters
		WHERE counter_name ='Log Bytes Flushed/sec';

		SELECT @signal_wait_time_ms = SUM(signal_wait_time_ms) - @signal_wait_time_ms
		FROM sys.dm_os_wait_stats
		SELECT @wait_time_ms = SUM(wait_time_ms) - @wait_time_ms
		FROM sys.dm_os_wait_stats;

	SELECT @SignalWaits = (SELECT CAST(100.0 * @signal_wait_time_ms / NULLIF(@wait_time_ms,0) AS DECIMAL(10,4)));

	INSERT INTO [Analysis].[DiskMemoryStats]
	(ServerNm, DateKey, TimeKey, TransactionRateSec, MemoryPagingRateSec, LogFlushesSec, LogBytesFlushedSec, ProcedureCacheRatio, SignalWaitPercent)
	SELECT @@SERVERNAME [ServerNm],
			CONVERT(VARCHAR(10), GETDATE(),112) [DateKey],
			LEFT((REPLACE(CONVERT(VARCHAR(10), GETDATE(),108),':','')),3)+'000' [TimeKey],
			CONVERT(INT, @TransactionRate) [TransactionRate],
			CONVERT(INT, @PagingRate) [MemoryPagingRateSec],
			CONVERT(INT, @LogFlushesSec) [LogFlushesSec],
			CONVERT(INT, @LogBytesFlushedSec) [LogBytesFlushedSec],
			@ProcureCacheRatio [ProcedureCacheRatio],
			@SignalWaits [SignalWaitPercent];

END
GO
PRINT N'Creating [Analysis].[Alert_DiskSpace]...';


GO
-- =============================================
-- Author:           David Speight
-- Create date: 2017-01-11
-- =============================================
CREATE PROCEDURE [Analysis].[Alert_DiskSpace]
@Threshold INT = 11
AS
BEGIN
       -- SET NOCOUNT ON added to prevent extra result sets from
       -- interfering with SELECT statements.
       SET NOCOUNT ON;
 
    DECLARE @tResults TABLE (ServerName VARCHAR(50), DriveName VARCHAR(5), Size INT, FreeSPace INT, PercentFree INT)
       INSERT INTO @tResults
              (      ServerName ,
                     DriveName ,
                     Size ,
                     FreeSPace ,
                     PercentFree)
       SELECT ServerName,
                     DriveName,
                     CONVERT(INT,Size),
                     CONVERT(INT,FreeSpace),
                     CONVERT(INT,PercentFree)
       FROM   [Analysis].[DiskUsage] (NOLOCK)
       WHERE  Perfdate > CONVERT(DATE,GETDATE())
              AND PercentFree < @Threshold;
 
 
       IF (SELECT COUNT(*) FROM @tResults) > 0
       BEGIN
 
              DECLARE @body varchar(max);
              DECLARE @Subject VARCHAR(50)=(@@SERVERNAME+' DISC ALERT ');
      
              -- Create HTML table output for email body.
              SET @body = cast( (
              SELECT td = tServerName + '</td><td>' + tDriveName+ '</td><td>' + tSize+ '</td><td>' + tFreeSPace+ '</td><td>' + tPercentFree
              FROM (
                           SELECT  tServerName = ServerName,
                                         tDriveName = DriveName,
                                         tSize = CONVERT(VARCHAR(12),Size)+' gb',
                                         tFreeSPace = CONVERT(VARCHAR(12),FreeSPace)+' gb',
                                         tPercentFree = CONVERT(VARCHAR(12),PercentFree)+'%'
                           FROM @tResults
                       ) as d
              for xml path( 'tr' ), type ) as varchar(max) )
      
              SET @body = '<table cellpadding="2" cellspacing="2" border="1">'
                             + '<tr><th>ServerName</th><th>DriveName</th><th>Size</th><th>Free Space</th><th>Percent Free</th></tr>'
                             + replace( replace( @body, '&lt;', '<' ), '&gt;', '>' )
                             + '</table>'
      
              -- SEND EMAIL
              EXEC msdb.dbo.sp_send_dbmail
                     @profile_name = 'LoveTheSql',
                     @recipients = 'Dave@LoveTheSql.com',
                     @body = @Body,
                     @subject = @Subject ,
                     @body_format = 'HTML'; 
 
       END;
END
GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [Analysis].[InstanceStats] WITH CHECK CHECK CONSTRAINT [FX_InstanceStats];


GO
PRINT N'Update complete.';


GO
